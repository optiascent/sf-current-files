{% comment %}
  Enhanced Quote Form Template for SimpleFencing.co.uk
  Improved UX with streamlined 5-step process and better mobile experience
{% endcomment %}

<div class="quote-enhanced-container">
  <div class="quote-header">
    <h1>Get Your Free Fence Quote</h1>
    <p>Professional vinyl fencing quote in just 5 simple steps</p>
  </div>

  <div class="quote-progress-wrapper">
    <div class="progress-container">
      <div class="progress-bar">
        <div class="progress-fill" id="progressFill" style="width: 20%"></div>
      </div>
      <div class="progress-steps">
        <div class="step-indicator active" data-step="1">
          <span class="step-number">1</span>
          <span class="step-label">Service</span>
        </div>
        <div class="step-indicator" data-step="2">
          <span class="step-number">2</span>
          <span class="step-label">Details</span>
        </div>
        <div class="step-indicator" data-step="3">
          <span class="step-number">3</span>
          <span class="step-label">Requirements</span>
        </div>
        <div class="step-indicator" data-step="4">
          <span class="step-number">4</span>
          <span class="step-label">Contact</span>
        </div>
        <div class="step-indicator" data-step="5">
          <span class="step-number">5</span>
          <span class="step-label">Confirm</span>
        </div>
      </div>
    </div>
  </div>

  <div class="quote-form-container">
    {% form 'contact', id: 'enhancedQuoteForm', class: 'enhanced-quote-form' %}
      {% include 'form-status', form_id: 'enhancedQuoteForm' %}
      
      <!-- Step 1: Service Type -->
      <div class="quote-step active" data-step="1">
        <div class="step-content">
          <h2>What fencing service do you need?</h2>
          <p class="step-description">Select the type of service you're looking for</p>
          
          <div class="service-grid">
            <label class="service-card" for="service-fence">
              <input type="radio" id="service-fence" name="contact[service_type]" value="Fence Installation" required>
              <div class="card-content">
                <div class="card-icon">üè†</div>
                <h3>Fence Installation</h3>
                <p>Complete fence installation service for your property</p>
              </div>
            </label>
            
            <label class="service-card" for="service-gate">
              <input type="radio" id="service-gate" name="contact[service_type]" value="Gate Installation" required>
              <div class="card-content">
                <div class="card-icon">üö™</div>
                <h3>Gate Installation</h3>
                <p>Professional gate installation and setup</p>
              </div>
            </label>
            
            <label class="service-card" for="service-both">
              <input type="radio" id="service-both" name="contact[service_type]" value="Fence and Gate Installation" required>
              <div class="card-content">
                <div class="card-icon">üè°</div>
                <h3>Fence & Gate</h3>
                <p>Complete fencing solution with gates</p>
              </div>
            </label>
            
            <label class="service-card" for="service-repair">
              <input type="radio" id="service-repair" name="contact[service_type]" value="Repair Service" required>
              <div class="card-content">
                <div class="card-icon">üîß</div>
                <h3>Repair Service</h3>
                <p>Fence and gate repair services</p>
              </div>
            </label>
          </div>
          
          <div class="step-actions">
            <button type="button" class="btn-next" data-next="2">Continue</button>
          </div>
        </div>
      </div>

      <!-- Step 2: Project Details -->
      <div class="quote-step" data-step="2">
        <div class="step-content">
          <h2>Tell us about your project</h2>
          <p class="step-description">Provide details about your location and requirements</p>
          
          <div class="form-grid">
            <div class="form-group full-width">
              <label for="project-address">Project Address *</label>
              <input type="text" id="project-address" name="contact[address]" placeholder="Enter your full address" required>
            </div>
            
            <div class="form-group">
              <label for="project-postcode">Postcode *</label>
              <input type="text" id="project-postcode" name="contact[postcode]" placeholder="Postcode" required>
            </div>
            
            <div class="form-group">
              <label for="property-type">Property Type</label>
              <select id="property-type" name="contact[property_type]">
                <option value="">Select property type</option>
                <option value="Residential">Residential</option>
                <option value="Commercial">Commercial</option>
                <option value="Industrial">Industrial</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="fence-type">Fence Type</label>
              <select id="fence-type" name="contact[fence_type]">
                <option value="">Select fence type</option>
                <option value="Picket Fence">Picket Fence</option>
                <option value="Privacy Fence">Privacy Fence</option>
                <option value="Pool Fence">Pool Fence</option>
                <option value="Equine Fence">Equine Fence</option>
                <option value="Not Sure">Not Sure</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="fence-height">Fence Height</label>
              <select id="fence-height" name="contact[fence_height]">
                <option value="">Select height</option>
                <option value="Up to 3 ft">Up to 3 ft (0.9m)</option>
                <option value="3-4 ft">3-4 ft (0.9-1.2m)</option>
                <option value="4-6 ft">4-6 ft (1.2-1.8m)</option>
                <option value="Over 6 ft">Over 6 ft (1.8m)</option>
                <option value="Not Sure">Not Sure</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="fence-length">Approximate Length</label>
              <select id="fence-length" name="contact[fence_length]">
                <option value="">Select length</option>
                <option value="Up to 32 ft">Up to 32 ft (10m)</option>
                <option value="32-82 ft">32-82 ft (10-25m)</option>
                <option value="82-164 ft">82-164 ft (25-50m)</option>
                <option value="Over 164 ft">Over 164 ft (50m)</option>
                <option value="Not Sure">Not Sure</option>
              </select>
            </div>
          </div>
          
          <div class="step-actions">
            <button type="button" class="btn-back" data-prev="1">Back</button>
            <button type="button" class="btn-next" data-next="3">Continue</button>
          </div>
        </div>
      </div>

      <!-- Step 3: Requirements -->
      <div class="quote-step" data-step="3">
        <div class="step-content">
          <h2>What are your requirements?</h2>
          <p class="step-description">Help us understand your specific needs</p>
          
          <div class="requirements-section">
            <h3>Primary Purpose (Select all that apply)</h3>
            <div class="checkbox-grid">
              <label class="checkbox-card">
                <input type="checkbox" name="contact[purpose]" value="Privacy">
                <div class="checkbox-content">
                  <span class="checkbox-icon">üîí</span>
                  <span class="checkbox-label">Privacy</span>
                </div>
              </label>
              
              <label class="checkbox-card">
                <input type="checkbox" name="contact[purpose]" value="Security">
                <div class="checkbox-content">
                  <span class="checkbox-icon">üõ°Ô∏è</span>
                  <span class="checkbox-label">Security</span>
                </div>
              </label>
              
              <label class="checkbox-card">
                <input type="checkbox" name="contact[purpose]" value="Pet Containment">
                <div class="checkbox-content">
                  <span class="checkbox-icon">üêï</span>
                  <span class="checkbox-label">Pet Containment</span>
                </div>
              </label>
              
              <label class="checkbox-card">
                <input type="checkbox" name="contact[purpose]" value="Child Safety">
                <div class="checkbox-content">
                  <span class="checkbox-icon">üë∂</span>
                  <span class="checkbox-label">Child Safety</span>
                </div>
              </label>
              
              <label class="checkbox-card">
                <input type="checkbox" name="contact[purpose]" value="Property Boundary">
                <div class="checkbox-content">
                  <span class="checkbox-icon">üìè</span>
                  <span class="checkbox-label">Property Boundary</span>
                </div>
              </label>
              
              <label class="checkbox-card">
                <input type="checkbox" name="contact[purpose]" value="Aesthetic Enhancement">
                <div class="checkbox-content">
                  <span class="checkbox-icon">‚ú®</span>
                  <span class="checkbox-label">Aesthetic Enhancement</span>
                </div>
              </label>
            </div>
          </div>
          
          <div class="requirements-section">
            <h3>Project Timeline</h3>
            <div class="radio-group">
              <label class="radio-option">
                <input type="radio" name="contact[timeline]" value="ASAP">
                <span class="radio-label">ASAP (Within 2 weeks)</span>
              </label>
              <label class="radio-option">
                <input type="radio" name="contact[timeline]" value="1-2 months">
                <span class="radio-label">1-2 months</span>
              </label>
              <label class="radio-option">
                <input type="radio" name="contact[timeline]" value="2-6 months">
                <span class="radio-label">2-6 months</span>
              </label>
              <label class="radio-option">
                <input type="radio" name="contact[timeline]" value="Flexible">
                <span class="radio-label">Flexible timing</span>
              </label>
            </div>
          </div>
          
          <div class="requirements-section">
            <h3>Additional Details</h3>
            <textarea name="contact[project_details]" placeholder="Please describe your project in detail, including any specific requirements, challenges, or preferences..." rows="4"></textarea>
          </div>
          
          <div class="step-actions">
            <button type="button" class="btn-back" data-prev="2">Back</button>
            <button type="button" class="btn-next" data-next="4">Continue</button>
          </div>
        </div>
      </div>

      <!-- Step 4: Contact Information -->
      <div class="quote-step" data-step="4">
        <div class="step-content">
          <h2>Your contact details</h2>
          <p class="step-description">How can we reach you with your quote?</p>
          
          <div class="form-grid">
            <div class="form-group">
              <label for="contact-name">Full Name *</label>
              <input type="text" id="contact-name" name="contact[name]" required>
            </div>
            
            <div class="form-group">
              <label for="contact-company">Company Name</label>
              <input type="text" id="contact-company" name="contact[company]" placeholder="Optional">
            </div>
            
            <div class="form-group">
              <label for="contact-phone">Phone Number *</label>
              <input type="tel" id="contact-phone" name="contact[phone]" required>
            </div>
            
            <div class="form-group">
              <label for="contact-email">Email Address *</label>
              <input type="email" id="contact-email" name="contact[email]" required>
            </div>
          </div>
          
          <div class="contact-preferences">
            <h3>How would you prefer to be contacted?</h3>
            <div class="preference-options">
              <label class="preference-card">
                <input type="radio" name="contact[contact_preference]" value="Phone" required>
                <div class="preference-content">
                  <span class="preference-icon">üìû</span>
                  <span class="preference-label">Phone Call</span>
                  <span class="preference-desc">Quick discussion</span>
                </div>
              </label>
              
              <label class="preference-card">
                <input type="radio" name="contact[contact_preference]" value="Email" required>
                <div class="preference-content">
                  <span class="preference-icon">üìß</span>
                  <span class="preference-label">Email</span>
                  <span class="preference-desc">Detailed quote</span>
                </div>
              </label>
              
              <label class="preference-card">
                <input type="radio" name="contact[contact_preference]" value="Both" required>
                <div class="preference-content">
                  <span class="preference-icon">üì±</span>
                  <span class="preference-label">Both</span>
                  <span class="preference-desc">Phone + email</span>
                </div>
              </label>
            </div>
          </div>
          
          <div class="step-actions">
            <button type="button" class="btn-back" data-prev="3">Back</button>
            <button type="button" class="btn-next" data-next="5">Review Quote</button>
          </div>
        </div>
      </div>

      <!-- Step 5: Confirmation -->
      <div class="quote-step" data-step="5">
        <div class="step-content">
          <h2>Review your quote request</h2>
          <p class="step-description">Please review your information before submitting</p>
          
          <div class="quote-summary">
            <div class="summary-section">
              <h3>Service Details</h3>
              <div class="summary-grid" id="serviceSummary">
                <!-- Populated by JavaScript -->
              </div>
            </div>
            
            <div class="summary-section">
              <h3>Project Information</h3>
              <div class="summary-grid" id="projectSummary">
                <!-- Populated by JavaScript -->
              </div>
            </div>
            
            <div class="summary-section">
              <h3>Contact Information</h3>
              <div class="summary-grid" id="contactSummary">
                <!-- Populated by JavaScript -->
              </div>
            </div>
          </div>
          
          <div class="terms-agreement">
            <label class="checkbox-agreement">
              <input type="checkbox" name="contact[terms_agreed]" required>
              <span class="checkbox-custom"></span>
              <span class="agreement-text">
                I agree to the <a href="/pages/terms-and-conditions" target="_blank">Terms & Conditions</a> 
                and <a href="/pages/privacy-policy" target="_blank">Privacy Policy</a>
              </span>
            </label>
          </div>
          
          <div class="step-actions final-actions">
            <button type="button" class="btn-back" data-prev="4">Back</button>
            <button type="submit" class="btn-submit">Get My Free Quote</button>
          </div>
        </div>
      </div>
    {% endform %}
  </div>
</div>

<!-- Enhanced Quote Form Styles -->
<style>
.quote-enhanced-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.quote-header {
  text-align: center;
  margin-bottom: 40px;
}

.quote-header h1 {
  font-size: 2.5rem;
  color: #2c3e50;
  margin-bottom: 10px;
}

.quote-header p {
  font-size: 1.1rem;
  color: #7f8c8d;
}

.quote-progress-wrapper {
  margin-bottom: 40px;
}

.progress-container {
  background: white;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.progress-bar {
  height: 6px;
  background: #ecf0f1;
  border-radius: 3px;
  margin-bottom: 20px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #3498db, #2ecc71);
  border-radius: 3px;
  transition: width 0.3s ease;
}

.progress-steps {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.step-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  opacity: 0.5;
  transition: opacity 0.3s ease;
}

.step-indicator.active {
  opacity: 1;
}

.step-indicator.completed {
  opacity: 1;
  color: #2ecc71;
}

.step-number {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: #ecf0f1;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  margin-bottom: 8px;
  transition: all 0.3s ease;
}

.step-indicator.active .step-number {
  background: #3498db;
  color: white;
}

.step-indicator.completed .step-number {
  background: #2ecc71;
  color: white;
}

.step-label {
  font-size: 0.9rem;
  font-weight: 500;
}

.quote-form-container {
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  overflow: hidden;
}

.quote-step {
  display: none;
  padding: 40px;
}

.quote-step.active {
  display: block;
}

.step-content h2 {
  font-size: 1.8rem;
  color: #2c3e50;
  margin-bottom: 8px;
}

.step-description {
  color: #7f8c8d;
  margin-bottom: 30px;
}

.service-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.service-card {
  border: 2px solid #ecf0f1;
  border-radius: 12px;
  padding: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: block;
}

.service-card:hover {
  border-color: #3498db;
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(52, 152, 219, 0.2);
}

.service-card input[type="radio"] {
  display: none;
}

.service-card input[type="radio"]:checked + .card-content {
  color: #3498db;
}

.service-card input[type="radio"]:checked {
  border-color: #3498db;
  background: #ebf3fd;
}

.card-content {
  text-align: center;
}

.card-icon {
  font-size: 2rem;
  margin-bottom: 10px;
}

.card-content h3 {
  margin-bottom: 8px;
  color: #2c3e50;
}

.card-content p {
  color: #7f8c8d;
  font-size: 0.9rem;
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group.full-width {
  grid-column: 1 / -1;
}

.form-group label {
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 8px;
}

.form-group input,
.form-group select,
.form-group textarea {
  padding: 12px 16px;
  border: 2px solid #ecf0f1;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #3498db;
}

.checkbox-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 15px;
  margin-bottom: 30px;
}

.checkbox-card {
  border: 2px solid #ecf0f1;
  border-radius: 8px;
  padding: 15px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: block;
}

.checkbox-card:hover {
  border-color: #3498db;
}

.checkbox-card input[type="checkbox"] {
  display: none;
}

.checkbox-card input[type="checkbox"]:checked + .checkbox-content {
  color: #3498db;
}

.checkbox-content {
  display: flex;
  align-items: center;
  gap: 10px;
}

.checkbox-icon {
  font-size: 1.2rem;
}

.radio-group {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 30px;
}

.radio-option {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px;
  border: 2px solid #ecf0f1;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.radio-option:hover {
  border-color: #3498db;
}

.radio-option input[type="radio"]:checked {
  border-color: #3498db;
  background: #ebf3fd;
}

.preference-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
  margin-bottom: 30px;
}

.preference-card {
  border: 2px solid #ecf0f1;
  border-radius: 8px;
  padding: 20px;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s ease;
  display: block;
}

.preference-card:hover {
  border-color: #3498db;
}

.preference-card input[type="radio"] {
  display: none;
}

.preference-card input[type="radio"]:checked + .preference-content {
  color: #3498db;
}

.preference-icon {
  font-size: 1.5rem;
  margin-bottom: 8px;
  display: block;
}

.preference-label {
  font-weight: 600;
  display: block;
  margin-bottom: 4px;
}

.preference-desc {
  font-size: 0.9rem;
  color: #7f8c8d;
}

.step-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 30px;
}

.btn-back,
.btn-next,
.btn-submit {
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-back {
  background: #ecf0f1;
  color: #7f8c8d;
}

.btn-back:hover {
  background: #d5dbdb;
}

.btn-next,
.btn-submit {
  background: linear-gradient(135deg, #3498db, #2ecc71);
  color: white;
}

.btn-next:hover,
.btn-submit:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
}

.quote-summary {
  margin-bottom: 30px;
}

.summary-section {
  margin-bottom: 25px;
  padding: 20px;
  background: #f8f9fa;
  border-radius: 8px;
}

.summary-section h3 {
  color: #2c3e50;
  margin-bottom: 15px;
}

.summary-grid {
  display: grid;
  gap: 10px;
}

.summary-item {
  display: flex;
  justify-content: space-between;
  padding: 8px 0;
  border-bottom: 1px solid #ecf0f1;
}

.summary-item:last-child {
  border-bottom: none;
}

.terms-agreement {
  margin-bottom: 30px;
}

.checkbox-agreement {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  cursor: pointer;
}

.checkbox-custom {
  width: 20px;
  height: 20px;
  border: 2px solid #ecf0f1;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  margin-top: 2px;
}

.checkbox-agreement input[type="checkbox"] {
  display: none;
}

.checkbox-agreement input[type="checkbox"]:checked + .checkbox-custom {
  background: #3498db;
  border-color: #3498db;
}

.checkbox-agreement input[type="checkbox"]:checked + .checkbox-custom::after {
  content: '‚úì';
  color: white;
  font-weight: bold;
}

.agreement-text {
  line-height: 1.5;
}

.agreement-text a {
  color: #3498db;
  text-decoration: none;
}

.agreement-text a:hover {
  text-decoration: underline;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .quote-enhanced-container {
    padding: 15px;
  }
  
  .quote-header h1 {
    font-size: 2rem;
  }
  
  .progress-steps {
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .step-label {
    display: none;
  }
  
  .quote-step {
    padding: 20px;
  }
  
  .service-grid,
  .checkbox-grid {
    grid-template-columns: 1fr;
  }
  
  .form-grid {
    grid-template-columns: 1fr;
  }
  
  .preference-options {
    grid-template-columns: 1fr;
  }
  
  .step-actions {
    flex-direction: column;
    gap: 15px;
  }
  
  .btn-back,
  .btn-next,
  .btn-submit {
    width: 100%;
  }
}
</style>

<!-- Enhanced Quote Form JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('enhancedQuoteForm');
  const steps = document.querySelectorAll('.quote-step');
  const stepIndicators = document.querySelectorAll('.step-indicator');
  const progressFill = document.getElementById('progressFill');
  
  let currentStep = 1;
  const totalSteps = 5;
  
  // Navigation functions
  function showStep(stepNumber) {
    steps.forEach(step => step.classList.remove('active'));
    stepIndicators.forEach(indicator => {
      indicator.classList.remove('active');
      if (parseInt(indicator.dataset.step) < stepNumber) {
        indicator.classList.add('completed');
      } else {
        indicator.classList.remove('completed');
      }
    });
    
    document.querySelector(`[data-step="${stepNumber}"]`).classList.add('active');
    document.querySelector(`.step-indicator[data-step="${stepNumber}"]`).classList.add('active');
    
    // Update progress bar
    const progress = (stepNumber / totalSteps) * 100;
    progressFill.style.width = progress + '%';
    
    currentStep = stepNumber;
    
    // Update summary if on final step
    if (stepNumber === 5) {
      updateSummary();
    }
  }
  
  // Next button handlers
  document.querySelectorAll('.btn-next').forEach(button => {
    button.addEventListener('click', function() {
      const nextStep = parseInt(this.dataset.next);
      
      if (validateCurrentStep()) {
        showStep(nextStep);
      }
    });
  });
  
  // Back button handlers
  document.querySelectorAll('.btn-back').forEach(button => {
    button.addEventListener('click', function() {
      const prevStep = parseInt(this.dataset.prev);
      showStep(prevStep);
    });
  });
  
  // Validation function
  function validateCurrentStep() {
    const currentStepElement = document.querySelector(`[data-step="${currentStep}"]`);
    const requiredFields = currentStepElement.querySelectorAll('[required]');
    let isValid = true;
    
    requiredFields.forEach(field => {
      if (field.type === 'radio') {
        const radioGroup = currentStepElement.querySelectorAll(`[name="${field.name}"]`);
        const isChecked = Array.from(radioGroup).some(radio => radio.checked);
        if (!isChecked) {
          isValid = false;
          showError(field, 'Please make a selection');
        }
      } else if (field.type === 'checkbox') {
        if (!field.checked) {
          isValid = false;
          showError(field, 'This field is required');
        }
      } else if (!field.value.trim()) {
        isValid = false;
        showError(field, 'This field is required');
      }
    });
    
    return isValid;
  }
  
  // Error display function
  function showError(field, message) {
    // Remove existing error
    const existingError = field.parentNode.querySelector('.error-message');
    if (existingError) {
      existingError.remove();
    }
    
    // Add error message
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;
    errorDiv.style.color = '#e74c3c';
    errorDiv.style.fontSize = '0.9rem';
    errorDiv.style.marginTop = '5px';
    
    field.parentNode.appendChild(errorDiv);
    
    // Remove error on input
    field.addEventListener('input', function() {
      if (existingError) {
        existingError.remove();
      }
    });
  }
  
  // Summary update function
  function updateSummary() {
    const formData = new FormData(form);
    
    // Service summary
    const serviceSummary = document.getElementById('serviceSummary');
    serviceSummary.innerHTML = `
      <div class="summary-item">
        <span>Service Type:</span>
        <span>${formData.get('contact[service_type]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Timeline:</span>
        <span>${formData.get('contact[timeline]') || 'Not specified'}</span>
      </div>
    `;
    
    // Project summary
    const projectSummary = document.getElementById('projectSummary');
    projectSummary.innerHTML = `
      <div class="summary-item">
        <span>Address:</span>
        <span>${formData.get('contact[address]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Postcode:</span>
        <span>${formData.get('contact[postcode]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Fence Type:</span>
        <span>${formData.get('contact[fence_type]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Height:</span>
        <span>${formData.get('contact[fence_height]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Length:</span>
        <span>${formData.get('contact[fence_length]') || 'Not specified'}</span>
      </div>
    `;
    
    // Contact summary
    const contactSummary = document.getElementById('contactSummary');
    contactSummary.innerHTML = `
      <div class="summary-item">
        <span>Name:</span>
        <span>${formData.get('contact[name]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Phone:</span>
        <span>${formData.get('contact[phone]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Email:</span>
        <span>${formData.get('contact[email]') || 'Not specified'}</span>
      </div>
      <div class="summary-item">
        <span>Preferred Contact:</span>
        <span>${formData.get('contact[contact_preference]') || 'Not specified'}</span>
      </div>
    `;
  }
  
  // Form submission
  form.addEventListener('submit', function(e) {
    if (!validateCurrentStep()) {
      e.preventDefault();
      return false;
    }
    
    // Show loading state
    const submitBtn = form.querySelector('.btn-submit');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = 'Submitting...';
    submitBtn.disabled = true;
    
    // Re-enable button after a delay (in case of errors)
    setTimeout(() => {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }, 5000);
  });
  
  // Auto-save functionality (optional)
  function saveProgress() {
    const formData = new FormData(form);
    const data = {};
    for (let [key, value] of formData.entries()) {
      data[key] = value;
    }
    localStorage.setItem('quoteFormProgress', JSON.stringify(data));
  }
  
  function loadProgress() {
    const saved = localStorage.getItem('quoteFormProgress');
    if (saved) {
      const data = JSON.parse(saved);
      Object.keys(data).forEach(key => {
        const field = form.querySelector(`[name="${key}"]`);
        if (field) {
          if (field.type === 'radio' || field.type === 'checkbox') {
            if (field.value === data[key]) {
              field.checked = true;
            }
          } else {
            field.value = data[key];
          }
        }
      });
    }
  }
  
  // Load saved progress on page load
  loadProgress();
  
  // Save progress on input changes
  form.addEventListener('input', saveProgress);
  form.addEventListener('change', saveProgress);
});
</script>

